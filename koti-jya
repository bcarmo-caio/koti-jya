#!/usr/bin/env python3

import sys
from mpmath import *


def fat(n):
    if n == 0:
        return 1
    else:
        return n*fat(n - 1)


def thread(i, num_threads, num_iterations, term, x):
    n = num_threads*num_iterations + i
    term[i] = (-1)**n/factorial(2*n)*x**(2*n) #TODO must check mpmath.factorial implementation
    return


def main():
    # Setting precision (number of decimal places)
    mp.dps = 100 #TODO change to 100000

    # Initialization
    if len(sys.argv) < 5:
        print("Usage: " + sys.argv[0] + " num_threads f|m precision x [d|s]")
        exit(1)
    num_iterations = mpf(0)
    cosine = mpf(0)
    num_threads = int(sys.argv[1])
    term = [0] * num_threads
    stop_condition = sys.argv[2]
    precision = 100**(-1*mpf(sys.argv[3]))
    x = mpf(sys.argv[4])
    try:
        option = sys.argv[5]
    except:
        option = None

    while True: # while stop condition not satisfied
        for i in range(num_threads):
            thread(i, num_threads, num_iterations, term, x)
        #TODO barrier here
        num_iterations += 1
        for i in range(num_threads):
            cosine += term[i]
            if option == "s":
                print("Partial value for cos(" + str(x) + ") in iteration " + str(int(num_iterations)) + ": " + str(cosine))
            if stop_condition == "f": #TODO is this valid for 1 thread?
                if fabs(term[i - 1] - term[i]) < precision:
                    print_exit(x, cosine, num_iterations, option)
                    return
            elif stop_condition == "m":
                if fabs(term[i]) < precision:
                    print_exit(x, cosine, num_iterations, option)
                    return


def print_exit(x, cosine, num_iterations, option):
    if option == "s":
        print("\nNumber of terms calculated: " + str(int(num_iterations)))
    else:
        print("Number of rounds: " + str(int(num_iterations)))
    print("cos(" + str(x) + ") = " + str(cosine))


if __name__ == '__main__':
    main()
